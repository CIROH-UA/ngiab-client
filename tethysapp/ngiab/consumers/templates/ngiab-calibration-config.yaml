apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ngiab-calibration-config
  namespace: argo
spec:
  entrypoint: main
  templates:

  - name: main
    inputs:
      parameters:
        - { name: input_bucket,  default: "" }
        - { name: input_key,     default: "" }   # e.g., .../ngiab.tgz (from preprocess)
        - { name: input_s3_url,  default: "" }   # if set, takes precedence
        - { name: input_subdir,  default: "" }   # inner folder (e.g., "ngiab")
        - { name: gage,              default: "" }
        - { name: iterations,        default: "100" }
        - { name: warmup,            default: "365" }
        - { name: calibration_ratio, default: "0.5" }
        - { name: force,             default: "false" }
        - { name: debug,             default: "false" }
        - { name: output_bucket,     default: "test-ngen" }
        - { name: output_prefix,     default: "demo/default" }
    steps:
    - - name: prepare
        template: prepare
        arguments:
          parameters:
            - { name: input_bucket,  value: "{{inputs.parameters.input_bucket}}" }
            - { name: input_key,     value: "{{inputs.parameters.input_key}}" }
            - { name: input_s3_url,  value: "{{inputs.parameters.input_s3_url}}" }
            - { name: input_subdir,  value: "{{inputs.parameters.input_subdir}}" }
            - { name: gage,              value: "{{inputs.parameters.gage}}" }
            - { name: iterations,        value: "{{inputs.parameters.iterations}}" }
            - { name: warmup,            value: "{{inputs.parameters.warmup}}" }
            - { name: calibration_ratio, value: "{{inputs.parameters.calibration_ratio}}" }
            - { name: force,             value: "{{inputs.parameters.force}}" }
            - { name: debug,             value: "{{inputs.parameters.debug}}" }
            - { name: output_bucket,     value: "{{inputs.parameters.output_bucket}}" }
            - { name: output_prefix,     value: "{{inputs.parameters.output_prefix}}" }

    # ⬇⬇⬇ Promote to parent so DAG can see them via tasks.<task>.outputs...
    outputs:
      parameters:
        - name: prepared_bucket
          valueFrom: { parameter: "{{steps.prepare.outputs.parameters.prepared_bucket}}" }
        - name: prepared_s3_key
          valueFrom: { parameter: "{{steps.prepare.outputs.parameters.prepared_s3_key}}" }
      artifacts:
        - name: calibration-prepared
          from: "{{steps.prepare.outputs.artifacts.calibration-prepared}}"

  - name: prepare
    inputs:
      parameters:
        - { name: input_bucket,  default: "" }
        - { name: input_key,     default: "" }
        - { name: input_s3_url,  default: "" }
        - { name: input_subdir,  default: "" }
        - { name: gage,              default: "" }
        - { name: iterations,        default: "100" }
        - { name: warmup,            default: "365" }
        - { name: calibration_ratio, default: "0.5" }
        - { name: force,             default: "false" }
        - { name: debug,             default: "false" }
        - { name: output_bucket,     default: "test-ngen" }
        - { name: output_prefix,     default: "demo/default" }
      artifacts:
        - name: preprocess
          optional: true
          # IMPORTANT: point to a directory, not a filename
          path: /tmp/ngiab
          s3:
            endpoint: s3.amazonaws.com
            region: us-east-1
            bucket: "{{inputs.parameters.input_bucket}}"
            key: "{{inputs.parameters.input_key}}"
            accessKeySecret: { name: aws-creds, key: AWS_ACCESS_KEY_ID }
            secretKeySecret:  { name: aws-creds, key: AWS_SECRET_ACCESS_KEY }
    script:
      image: ghcr.io/astral-sh/uv:python3.11-bookworm-slim
      command: [bash, -lc]
      env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom: { secretKeyRef: { name: aws-creds, key: AWS_ACCESS_KEY_ID } }
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom: { secretKeyRef: { name: aws-creds, key: AWS_SECRET_ACCESS_KEY } }
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      source: |
        set -euo pipefail

        export DEBIAN_FRONTEND=noninteractive
        apt-get update -y && apt-get install -y --no-install-recommends \
          curl ca-certificates findutils coreutils gzip tar unzip && \
          rm -rf /var/lib/apt/lists/*

        mkdir -p /tmp/ngiab /tmp/data /tmp/out

        IN_URL="{{inputs.parameters.input_s3_url}}"
        echo "Input S3 URL: ${IN_URL}"

        SRC_DIR="/tmp/ngiab"
        TAR=""
        if [ -n "${IN_URL}" ]; then
          # URL takes precedence — download to our own filename
          if ! command -v aws >/dev/null 2>&1; then
            curl -L "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
            unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install
          fi
          TAR="/tmp/ngiab/from_url.tgz"
          aws s3 cp "${IN_URL}" "${TAR}" --no-progress

          # Extract (gz if possible, fall back to plain tar)
          if ! tar -C /tmp/data -xzf "${TAR}" 2>/dev/null; then
            tar -C /tmp/data -xf "${TAR}"
          fi
          SRC_DIR="/tmp/data"
        fi

        IN_SUB="{{inputs.parameters.input_subdir}}"
        DATA_DIR=""
        # Prefer an explicit subdir if provided
        if [ -n "${IN_SUB}" ] && [ -d "${SRC_DIR}/${IN_SUB}/config" ]; then
          DATA_DIR="${SRC_DIR}/${IN_SUB}"
        elif [ -d "${SRC_DIR}/config" ]; then
          DATA_DIR="${SRC_DIR}"
        else
          # fall back: first subdir that contains config/
          DATA_DIR="$(find "${SRC_DIR}" -mindepth 1 -maxdepth 1 -type d -exec test -d '{}/config' ';' -print -quit || true)"
        fi

        if [ ! -d "${DATA_DIR}/config" ]; then
          echo "ERROR: could not locate NGIAB data folder with config/ under ${SRC_DIR}"
          find "${SRC_DIR}" -maxdepth 2 -type d -print || true
          exit 2
        fi

        GAGE="{{inputs.parameters.gage}}"
        ITERS="{{inputs.parameters.iterations}}"
        WARMUP="{{inputs.parameters.warmup}}"
        CR="{{inputs.parameters.calibration_ratio}}"
        FORCE="{{inputs.parameters.force}}"
        DEBUG="{{inputs.parameters.debug}}"

        set +o pipefail
        uvx ngiab-cal "$DATA_DIR" -g "$GAGE" -i "$ITERS" -w "$WARMUP" --calibration_ratio "$CR" \
          $( [ "$FORCE" = "true" ] && echo "-f" ) \
          $( [ "$DEBUG" = "true" ] && echo "--debug" )
        set -o pipefail

        tar -C "$(dirname "$DATA_DIR")" -czf /tmp/out/calibration-prepared.tgz "$(basename "$DATA_DIR")"

        printf "%s\n" "{{inputs.parameters.output_bucket}}" > /tmp/out/.prepared_bucket
        printf "%s\n" "{{inputs.parameters.output_prefix}}/calibration-prepared.tgz" > /tmp/out/.prepared_key

    outputs:
      parameters:
        - name: prepared_bucket
          valueFrom: { path: /tmp/out/.prepared_bucket }
        - name: prepared_s3_key
          valueFrom: { path: /tmp/out/.prepared_key }
      artifacts:
        - name: calibration-prepared
          path: /tmp/out/calibration-prepared.tgz
          archive: { none: {} }
          s3:
            endpoint: s3.amazonaws.com
            region: us-east-1
            bucket: "{{inputs.parameters.output_bucket}}"
            key: "{{inputs.parameters.output_prefix}}/calibration-prepared.tgz"
            accessKeySecret: { name: aws-creds, key: AWS_ACCESS_KEY_ID }
            secretKeySecret:  { name: aws-creds, key: AWS_SECRET_ACCESS_KEY }
